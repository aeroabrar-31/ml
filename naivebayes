
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
iris=pd.read_csv('https://raw.githubusercontent.com/lab-420/ml/main/Iris.csv')
iris


iris.head()

iris['Species'].unique()
iris.describe(include='all')

iris.info()

iris.drop(columns="Id",inplace=True)
iris.isnull().sum()

pip install missingno

import missingno as msno
msno.bar(iris,figsize=(8,6),color='skyblue')
plt.show()

g=sns.relplot(x='SepalLengthCm',y='SepalWidthCm',data=iris,hue='Species',style='Species')
#g.fig.set_size_inches(10,5)
plt.show()

g=sns.relplot(x='PetalLengthCm',y='PetalWidthCm',data=iris,hue='Species',style='Species')
#g.fig.set_size_inches(10,5)
plt.show()

sns.pairplot(iris,hue="Species")
plt.show()

plt.figure(figsize=(15,10))
plt.subplot(2,2,1)
sns.boxplot(x='Species',y='PetalLengthCm',data=iris)
plt.subplot(2,2,2)
sns.boxplot(x='Species',y='PetalWidthCm',data=iris)
plt.subplot(2,2,3)
sns.boxplot(x='Species',y='SepalLengthCm',data=iris)
plt.subplot(2,2,4)
sns.boxplot(x='Species',y='SepalWidthCm',data=iris)
plt.show()

plt.subplots(figsize=(10,7))
sns.boxplot(data=iris).set_title("Distribution of Sepal_length, Sepal_width, petal_length and petal_width of 3 flowers")
plt.show()

plt.figure(figsize=(15,10))
plt.subplot(2,2,1)
sns.violinplot(x='Species',y='PetalLengthCm',data=iris)
plt.subplot(2,2,2)
sns.violinplot(x='Species',y='PetalWidthCm',data=iris)
plt.subplot(2,2,3)
sns.violinplot(x='Species',y='SepalLengthCm',data=iris)
plt.subplot(2,2,4)
sns.violinplot(x='Species',y='SepalWidthCm',data=iris)
plt.show()

plt.subplots(figsize=(10,7))
sns.violinplot(data=iris)
sns.swarmplot( data=iris)
plt.show()

iris.plot.area(y=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],alpha=0.4,figsize=(12, 6));

iris.corr()
  
plt.subplots(figsize = (8,8))
sns.heatmap(iris.corr(),annot=True,fmt="f").set_title("Corelation of attributes (petal length,width and sepal length,width) among Iris species")
plt.show()
  sns.heatmap(iris.corr(),annot=True,fmt="f").set_title("Corelation of attributes (petal length,width and sepal length,width) among Iris species")

X=iris.iloc[:,0:4].values
y=iris.iloc[:,4].values
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)
y

y = y.astype('int')
y

3. Building Machine Learning Models
#Metrics
from sklearn.metrics import make_scorer, accuracy_score,precision_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score ,precision_score,recall_score,f1_score

#Model Select
from sklearn.model_selection import KFold,train_test_split,cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
Splitting The Data into Training And Testing Dataset


#Train and Test split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)
X_train

y_train



model = GaussianNB()
model.fit(X_train,y_train)
y_predict=model.predict(X_test)
accuracy_score(y_test,y_predict)

cm = confusion_matrix(y_test, y_predict)
accuracy = accuracy_score(y_test,y_predict)
precision =precision_score(y_test, y_predict,average='micro')
recall =  recall_score(y_test, y_predict,average='micro')
f1 = f1_score(y_test,y_predict,average='micro')
print('Confusion matrix for Naive Bayes\n',cm)
print('accuracy_Naive Bayes: %.3f' %accuracy)
print('precision_Naive Bayes: %.3f' %precision)
print('recall_Naive Bayes: %.3f' %recall)
print('f1-score_Naive Bayes : %.3f' %f1)

accuracy_Naive Bayes: 0.400
precision_Naive Bayes: 0.400
recall_Naive Bayes: 0.400
f1-score_Naive Bayes : 0.400
